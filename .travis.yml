language: python

os:
    - linux

# The apt packages below are needed for sphinx builds. A full list of packages
# that can be included can be found here:
#
# https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise

addons:
    apt:
        packages:
            - graphviz


stage: Comprehensive tests

stages:
   # Do the style check and a single test job, don't proceed if it fails
   - name: Initial tests
   # Test docs, astropy dev, and without optional dependencies
   - name: Comprehensive tests
   # Slow tests that should only run if comprehensive ones passed
   - name: Slow tests
   # These will only run when cron is opted in
   - name: Cron tests
     if: type = cron


env:
    global:
        # The following versions are the 'default' for tests, unless
        # overridden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - TOXENV=''
        - TOXARGS=''
        - TOXPOSARGS=''
        - PYTHON_VERSION=3.7
        - EVENT_TYPE='pull_request push'

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:
        # INITIAL TESTS
        # -------------

        # Do a coverage test.
        - os: linux
          stage: Initial tests
          python: 3.7
          env: TOXENV='coverage'

        # Do a PEP8 test with flake8
        - os: linux
          stage: Initial tests
          python: 3.7
          env: TOXENV='pycodestyle'


        # COMPREHENSIVE TESTS
        # -------------------

        # Check for sphinx doc build warnings - we do this first because it
        # may run for a long time
        - os: linux
          python: 3.7
          env: TOXENV='build_docs'

        # Try all python versions and Numpy versions. Since we can assume that
        # the Numpy developers have taken care of testing Numpy with different
        # versions of Python, we can vary Python and Numpy versions at the same
        # time.
        - os: linux
          python: 3.7
          env: TOXENV='test-numpy116-astropy3'

        # SLOW TESTS
        # ----------

        # Some day Windows might be here. Today is not that day.

        # CRON-ONLY TESTS
        # ---------------

        # Try MacOS X, usually enough only to run from cron as hardly there are
        # issues that are not picked up by a linux worker
        - os: osx
          language: shell
          stage: Cron tests
          env: TOXENV='test'
               EVENT_TYPE='cron'

        # Add a job that runs from cron only and tests against astropy dev
        # to give a change for early discovery of issues and feedback
        # for both developer teams.
        - os: linux
          stage: Cron tests
          python: 3.7
          env: TOXENV='test-dev'
               EVENT_TYPE='cron'

        # Try on Windows.
        - os: windows
          language: shell
          stage: Cron tests
          env: TOXENV='test'
               EVENT_TYPE='cron'
               PATH=/c/Python37:/c/Python37/Scripts:$PATH

    allow_failures:
        # Do a PEP8 test with flake8
        # (do allow to fail unless your code completely compliant)
        # - os: linux
        #   stage: Initial tests
        #   env: MAIN_CMD='flake8 glowing_waffles --count --show-source --statistics $FLAKE8_OPT' SETUP_CMD=''

before_install:
    - if [[ $TRAVIS_OS_NAME == windows ]]; then choco install python --version 3.7; python -m pip install --upgrade pip; fi
    - if [[ $TRAVIS_OS_NAME == osx ]]; then wget https://repo.continuum.io/miniconda/Miniconda3-4.7.10-MacOSX-x86_64.sh -O miniconda.sh; bash miniconda.sh -b -p $HOME/miniconda; $HOME/miniconda/bin/conda init bash; source ~/.bash_profile; conda activate base; conda config --set always_yes true; conda create -n test python=$PYTHON_VERSION; conda activate test; fi
    - git fetch --unshallow .
    - git fetch --depth=1000000

install:
    - pip install tox --upgrade
script:
   - tox -e $TOXENV $TOXARGS -- $TOXPOSARGS

after_success:
    # If coveralls.io is set up for this package, uncomment the line below.
    # The coveragerc file may be customized as needed for your package.
    # - if [[ $SETUP_CMD == *coverage* ]]; then coveralls --rcfile='glowing_waffles/tests/coveragerc'; fi
    - pip install codecov
    - codecov
